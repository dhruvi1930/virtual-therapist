import os
import cv2
import numpy as np
import math as mt
import time


from tensorflow.keras.preprocessing import image
import keras
from tensorflow.keras.models import model_from_json, load_model
def image1():
    x1=[]
    start = time.time()
    end=0
    model = model_from_json(open(r"E:\sem7\project\virtual\ash1.json", "r").read())
    model.load_weights(r'E:\sem7\project\virtual\ash1.h5')
    face_haar_cascade = cv2.CascadeClassifier(r'haarcascade_frontalface_default.xml')
    cap = cv2.VideoCapture(0)
    while True:
        ret, test_img = cap.read()
        if not ret:
            continue
        gray_img = cv2.cvtColor(test_img, cv2.COLOR_BGR2GRAY)
        faces_detected = face_haar_cascade.detectMultiScale(gray_img, 1.32, 5)
        for (x, y, w, h) in faces_detected:
            cv2.rectangle(test_img, (x, y), (x + w, y + h), (255, 0, 0), thickness=7)
            roi_gray = gray_img[y:y + w, x:x + h]
            roi_gray = cv2.resize(roi_gray, (48, 48))
            img_pixels = image.img_to_array(roi_gray)
            img_pixels = np.expand_dims(img_pixels, axis=0)
            img_pixels /= 255
            preds = model.predict(img_pixels)[0]
            emotions = ('angry', 'happy', 'sad')
            predicted_emotion = emotions[preds.argmax()]
            x1.append(predicted_emotion)
            end = time.time()
        if (end-start)>=3:
            break

    cap.release()
    return(max(x1))

def max(arr):
    n = len(arr)
    Hash = dict()
    for i in range(n):
        if arr[i] in Hash.keys():
            Hash[arr[i]] += 1
        else:
            Hash[arr[i]] = 1

    # find the max frequency
    max_count = 0
    res = -1
    for i in Hash:
        if (max_count < Hash[i]):
            res = i
            max_count = Hash[i]
    return res